const mongoose = require('mongoose');

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
const connectDB = async () => {
  try {
    const conn = await mongoose.connect('mongodb+srv://jobscope_user:KK381kk4831kk@jobscope.yes86va.mongodb.net/jobscope?retryWrites=true&w=majority&appName=JobScope');
    console.log(`ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: ${conn.connection.host}`);
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    process.exit(1);
  }
};

// ูููุฐุฌ ุงูุญุฑูู
const craftsmanSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  professions: [String],
  specializations: [String],
  bio: String,
  features: [String],
  workRadius: { type: Number, default: 5 },
  location: {
    lat: Number,
    lng: Number,
  },
  address: String,
  streetsInWorkRange: [String],
  hospitalsInWorkRange: [String],
  mosquesInWorkRange: [String],
  neighborhoodsInWorkRange: [String],
  available: { type: Boolean, default: true },
  workGallery: [String],
  rating: { type: Number, default: 0, min: 0, max: 5 },
  reviewCount: { type: Number, default: 0 },
  workingHours: {
    type: Map,
    of: {
      isWorking: Boolean,
      start: String,
      end: String
    }
  },
  workingHoursArray: [Object],
}, {
  timestamps: true,
});

const Craftsman = mongoose.model("Craftsman", craftsmanSchema);

// ุฏุงูุฉ ุชูุธูู ุงูุตูุฑ ุงููุฏููุฉ
const cleanOldImagePaths = async () => {
  try {
    console.log('๐งน ุจุฏุก ุชูุธูู ูุณุงุฑุงุช ุงูุตูุฑ ุงููุฏููุฉ...');
    
    const craftsmen = await Craftsman.find({
      workGallery: { $exists: true, $ne: [] }
    });

    console.log(`ุชู ุงูุนุซูุฑ ุนูู ${craftsmen.length} ุญุฑูู ูุฏููู ุตูุฑ ูู ุงููุนุฑุถ`);

    let updatedCount = 0;
    let removedImagesCount = 0;

    for (const craftsman of craftsmen) {
      try {
        let hasChanges = false;
        const cleanedGallery = [];

        console.log(`\n--- ูุนุงูุฌุฉ ุงูุญุฑูู ${craftsman._id} ---`);
        console.log(`ุนุฏุฏ ุงูุตูุฑ ุงูุญุงูู: ${craftsman.workGallery.length}`);

        for (const imagePath of craftsman.workGallery) {
          // ุงูุงุญุชูุงุธ ููุท ุจุงูุตูุฑ Base64
          if (imagePath && imagePath.startsWith('data:image/')) {
            cleanedGallery.push(imagePath);
            console.log(`โ ุงุญุชูุธ ุจุตูุฑุฉ Base64 (${imagePath.length} ุญุฑู)`);
          } else if (imagePath && imagePath.startsWith('/uploads/')) {
            console.log(`โ ุญุฐู ุตูุฑุฉ ูุฏููุฉ: ${imagePath}`);
            removedImagesCount++;
            hasChanges = true;
          } else if (imagePath && imagePath.startsWith('http')) {
            console.log(`โ ุญุฐู ุฑุงุจุท ุฎุงุฑุฌู: ${imagePath}`);
            removedImagesCount++;
            hasChanges = true;
          } else {
            console.log(`โ ุญุฐู ูุณุงุฑ ุบูุฑ ุตุงูุญ: ${imagePath}`);
            removedImagesCount++;
            hasChanges = true;
          }
        }

        if (hasChanges) {
          craftsman.workGallery = cleanedGallery;
          await craftsman.save();
          updatedCount++;
          console.log(`โ ุชู ุชุญุฏูุซ ูุนุฑุถ ุงูุญุฑูู ${craftsman._id}`);
          console.log(`ุนุฏุฏ ุงูุตูุฑ ุจุนุฏ ุงูุชูุธูู: ${cleanedGallery.length}`);
        } else {
          console.log(`โ ูุง ุญุงุฌุฉ ูุชุญุฏูุซ ูุนุฑุถ ุงูุญุฑูู ${craftsman._id}`);
        }

      } catch (error) {
        console.error(`โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุญุฑูู ${craftsman._id}:`, error.message);
      }
    }

    console.log(`\n=== ููุฎุต ุงูุชูุธูู ===`);
    console.log(`ุนุฏุฏ ุงูุญุฑูููู ุงููุญุฏุซูู: ${updatedCount}`);
    console.log(`ุนุฏุฏ ุงูุตูุฑ ุงููุญุฐููุฉ: ${removedImagesCount}`);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชูุธูู ูุณุงุฑุงุช ุงูุตูุฑ:', error);
  }
};

// ุฏุงูุฉ ุฑุฆูุณูุฉ
const main = async () => {
  console.log('๐ ุจุฏุก ุชูุธูู ูุณุงุฑุงุช ุงูุตูุฑ ุงููุฏููุฉ...\n');
  
  await connectDB();
  await cleanOldImagePaths();
  
  console.log('\nโ ุชู ุงูุงูุชูุงุก ูู ุชูุธูู ูุณุงุฑุงุช ุงูุตูุฑ ุงููุฏููุฉ!');
  
  mongoose.connection.close();
  process.exit(0);
};

// ุชุดุบูู ุงูุณูุฑูุจุช
main().catch(error => {
  console.error('ุฎุทุฃ ูู ุชุดุบูู ุงูุณูุฑูุจุช:', error);
  process.exit(1);
});
